"""
Created by Katia Steinfeld
10.18.2024
Notes:
v1 - labels added on pptx afterwards
"""

# Libraries
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.patches as mpatches
import matplotlib.lines as mlines
# Define the base subgroup size, including a small wedge to represent the gap (3 degrees)
subgroup_size = np.concatenate([np.repeat(15, 12), [3]])  # 12 wedges + 1 small wedge for the gap

# Define labels for each developmental stage
subgroup_names = {
    'Infancy': [
        'Body \n boundaries',                           # Body 
        '',                                             # Body - Nav 
        'Egocentric \n reference',                      # Nav 
        '',                                             # Nav - Obj
        'Obj. \n representation',                       # Obj
        '',                                             # Obj - Speech
        'Phonological \n expansion',                    # Speech
        'Synchronous \n speech preference',             # Speech - Cog
        'Selective \n attention',                       # Cog
        'Joint \n engagement',                          # Cog - SMI
        'SM \n representation',                         # SMI
        'Body \n representation',                       # SMI - Body
    ],
    'Toddlerhood - Middle School': [
        'Body ownership',                               # Body
        'PPS Mapping',                                  # Body - Nav
        'Response-based strategy',                      # Nav
        '',                                             # Nav - Obj
        'Obj. categorization',                          # Obj
        'Symbolic obj. representation',                 # Obj - Speech
        'Language production',                          # Speech
        'Social interactions',                          # Speech - Cog
        'Attentional capture',                          # Cog
        'Fluid reasoning',                              # Cog - SMI
        'Dynamic motor representation',                 # SMI
        'Body Remapping'                                # SMI - Body
    ],
    
    'Adolescence': [
        'Integrated \n body schema',                    # Body
        'Mapping \n self-motion v. landmarks',          # Body - Nav
        'Place-based strategy',                         # Nav
        'Recognition of distant landmarks',             # Nav - Obj
        'Invariant \n  obj. representation',            # Obj
        'Abstract \n language comprehension',           # Obj - Speech
        '?',                                            # Speech
        'Attentional control',                          # Speech - Cog
        'Enhanced learning',                            # Cog
        'Increased working memory',                     # Cog - SMI
        'Complex \n movement strategies',               # SMI
        'Automation \n of precise movement'             # SMI - Body
    ]
}

# Define colors for senses
color_map = {
    'Ss': 'red',
    'V': 'green',
    'A': 'blue',
    'VSs': 'yellow',
    'ASs': 'magenta',
    'VA': 'cyan',
    'VASs': 'purple'
}

# Define textures for interaction types
hatch_map = {
    'I1': '||',
    'I2': 'xx',
    'I3': '---'
}

# Define the interaction types and sense combinations for each wedge
subgroup_senses = {
    'Infancy': [
        'Ss',                         # Body 
        'Ss',                         # Body - Nav 
        'Ss',                         # Nav 
        'Ss',                         # Nav - Obj
        'V',                          # Obj
        'VA',                         # Obj - Speech
        'VA',                         # Speech
        'VA',                         # Speech - Cog
        'VA',                         # Cog
        'VA',                         # Cog - SMI
        'Ss',                         # SMI
        'Ss',                         # SMI - Body
    ],
    'Toddlerhood - Middle School': [
        'VASs',                       # Body
        'VSs',                        # Body - Nav
        'VSs',                        # Nav
        'VSs',                        # Nav - Obj
        'VSs',                        # Obj
        'VASs',                       # Obj - Speech
        'VASs',                       # Speech
        'VASs',                       # Speech - Cog
        'VA',                         # Cog
        'VA',                         # Cog - SMI
        'VSs',                        # SMI
        'VASs'                        # SMI - Body
    ],
    
    'Adolescence': [
        'VASs',                       # Body
        'VASs',                       # Body - Nav
        'VASs',                       # Nav
        'VASs',                       # Nav - Obj
        'VASs',                       # Obj
        'VA',                         # Obj - Speech
        'VASs',                       # Speech
        'VASs',                       # Speech - Cog
        'VASs',                       # Cog
        'VASs',                       # Cog - SMI
        'VASs',                       # SMI
        'VASs'                        # SMI - Body
    ]
}

subgroup_interactions = {
    'Infancy':  np.concatenate([np.repeat('I1', 11), np.array(['I2'])]),
    'Toddlerhood - Middle School':np.concatenate([np.repeat('I2', 10), np.array(['I3','I1'])]),
    'Adolescence':np.repeat('I3',12)
}    
        
        
# Create a function to calculate text positions
def label_position(angle, radius):
    theta = np.radians(angle)
    x = radius * np.cos(theta)
    y = radius * np.sin(theta)
    return x, y

# Adjust subgroup sizes: Odd wedges take 2/3 of the size of even wedges
adjusted_subgroup_size = [10 if i % 2 != 0 else 15 for i in range(12)] + [7]  # Adding the 13th wedge size (3 degrees)
wedge_alpha = [0.25 if i % 2 != 0 else 0.1 for i in range(12)] + [0]  # Adding transparency for the 13th wedge

# Create the figure
fig, ax = plt.subplots(figsize=(20, 20))
ax.axis('equal')

# Define the starting angle and angle step
start_angle = 0

# New radii for each developmental stage
radii = [0.9, 1.4, 1.8]
widths = [0.9, 0.5, 0.4]
stages = ['Infancy', 'Toddlerhood - Middle School', 'Adolescence']

# Increase the alpha transparency slightly to make colors more visible
alpha_value = 0.2
  
# Loop through each stage
for radius, stage, base_width in zip(radii, stages, widths):
    # Get the sense combination and interaction type for the stage
    sense_combination = subgroup_senses[stage]
    interaction_type = subgroup_interactions[stage]
    
    # Get the colors for all wedges in the stage (excluding the 13th wedge)
    wedge_colors = [color_map[sense] for sense in sense_combination]
    
    # Plot all wedges for the current stage at once, using adjusted sizes
    wedges, _ = ax.pie(adjusted_subgroup_size, radius=radius, startangle=start_angle, colors=wedge_colors + ['white'],
                       wedgeprops=dict(width=base_width, edgecolor='black', alpha=alpha_value))
    # Plot all wedges for the current stage at once, using adjusted sizes
    wedges, _ = ax.pie(adjusted_subgroup_size, radius=radius, startangle=start_angle, colors=wedge_colors + ['white'],
                       wedgeprops=dict(width=base_width-0.01, edgecolor='grey', alpha=0))
    
    # Apply hatch and label each wedge (skip the 13th wedge)
    for i, wedge in enumerate(wedges[:-1]):  # Exclude the 13th wedge
        wedge.set_hatch(hatch_map[interaction_type[i]])
        wedge.set_alpha(wedge_alpha[i])


# Add the 13th wedge (no fill, no hatch, no label, from 87 to 90 degrees)
ax.pie([3], radius=1.5, startangle=87, colors=['white'], wedgeprops=dict(width=0.4, edgecolor='white', fill=False, alpha=0))

# Adjusted function to place the text at the start of each wedge, curved along a circular path
def place_wrapped_text(ax, radius, label, start_angle, wedge_angle, label_offset=0.05):
    # Calculate the position for the label on the rim, using the start_angle
    x = (radius + label_offset) * np.cos(np.radians(start_angle))
    y = (radius + label_offset) * np.sin(np.radians(start_angle))

    # Rotate the text so it follows the circular path, aligning with the start of the wedge
    rotation = start_angle - 90  # Rotate the label to align with the circular path

    # Add the label to the plot, with rotation
    ax.text(x, y, label, ha='center', va='center', rotation=rotation, rotation_mode='anchor', fontsize=12)


# Define the base subgroup size, including a small wedge to represent the gap (3 degrees)
subgroup_size = np.repeat(18, 6) # 12 wedges + 1 small wedge for the gap
wedge_angles = np.cumsum(subgroup_size)  # Calculate the cumulative angles for each wedge

# Define labels
labels = [
    'Navigation',
    
    'Body \n Representation',

    'Sensorimotor \n Integration',
    
     'Cognition',
    'Speech and \n Language',
  
    'Object \n Recognition', 
    
    ]
# Define the starting angle for the entire pie chart
start_angle = 0

# Place the labels at the start of each wedge
for i, label in enumerate(labels):
    if label:  # Skip empty labels
        # Place the label at the start of each wedge
        place_wrapped_text(ax, radius=2.1, label=label, start_angle=start_angle+11, wedge_angle=subgroup_size[i])
        
        # Update the starting angle for the next wedge
        start_angle += subgroup_size[i] * 360 / np.sum(subgroup_size)  # Angle for the next wedge
# Create legend for senses (colors)
legend_labels_senses = ['Somatosensory (Ss)', 'Visual (V)', 'Auditory (A)', 'Visual + Somatosensory (VSs)', 
                        'Auditory + Somatosensory (ASs)', 'Visual + Auditory (VA)', 'All Senses (VASs)']
legend_colors = [color_map['Ss'], color_map['V'], color_map['A'], color_map['VSs'], color_map['ASs'], color_map['VA'], color_map['VASs']]

# Create handles for the color legend
color_handles = [mpatches.Patch(color=color, label=label) for color, label in zip(legend_colors, legend_labels_senses)]

# Create legend for interaction types (hatches)
legend_labels_hatches = ['Enhancement by synchronous cues', 'Sensory cross-calibration', 'Sensory integration']
legend_hatches = [hatch_map['I1'], hatch_map['I2'], hatch_map['I3']]
                  
# Create handles for the hatch legend
hatch_handles = [
    mpatches.Patch(facecolor='white', edgecolor='black', hatch=hatch, label=label)
    for hatch, label in zip(legend_hatches, legend_labels_hatches)
]

# Combine both legends (senses and hatches)
handles = color_handles + hatch_handles
labels = legend_labels_senses + legend_labels_hatches

# Add the combined legend to the plot
plt.legend(handles=handles, title="Legend", loc='center', bbox_to_anchor=(0.8, 0.5))  # Adjust bbox_to_anchor for closer position
 
# Display the plot
plt.tight_layout()
plt.show()
